@page "/pago"
@page "/Pago/{PagoId:int}"
@inject PagoBLL pagoBLL
@inject VentaBLL ventaBLL
@inject ClienteBLL clienteBLL
@inject NotificationService notification

<AuthorizeView Context="Context">
    <Authorized>
        <EditForm Model="pago" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />

            <div class="accordion-item">
                <div class="modal-header">
                    <h1>Registro de Pago</h1>
                </div>

                <div class="accordion-body">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="PagoId">id</label>
                            <div class="input-group">
                                <InputNumber type="number" @bind-Value="pago.PagoId" class="form-control" />
                                <button type="button" class="btn btn-outline-primary" @onclick="Buscar"><span
                                        class="oi oi-magnifying-glass"></span></button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="Fecha" class="form-label">Fecha</label>
                            <InputDate @bind-Value="pago.Fecha" class="form-control" id="Modelo" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label for="select" class="form-label">Monto a pagar del cliente</label>
                            <InputSelect class="form-select" @bind-Value="pago.clienteId">
                                @foreach (Cliente item in clienteBLL.GetList(o => true))
                                {
                                    <option value="@item.ClienteId">@item.ClienteId @item.Nombre @item.Apellido
                                        ($@item.balance)</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-6">
                            <label for="select" class="form-label">VentaId</label>
                            <InputSelect class="form-select" @bind-Value="pago.ventaId">
                                @foreach (Venta item in ventaBLL.GetList(o => true))
                                {
                                    <option value="@item.VentaId">@item.VentaId @item.Concepto</option>
                                }
                            </InputSelect>
                        </div>

                    </div>
                    <div class="col-md-6">
                        <label for="Concepto" class="form-label">Concepto</label>
                        <InputText @bind-Value="pago.Concepto" class="form-control" id="Modelo" />
                    </div>
                </div>

                @*Botones*@
                <hr>
                <div class="text-center">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"><span
                            class="oi oi-file"></span> Nuevo</button>
                    <button type="submit" class="btn btn-outline-success"><span class="oi oi-document"></span>
                        Guardar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><span
                            class="oi oi-delete"></span> Eliminar</button>
                    <br>
                    <br>
                </div>
            </div>
        </EditForm>


    </Authorized>
    <NotAuthorized>
        <div class="container-fluid">
            <div class="row justify-content-center">
                <div class="col-md-6 text-center">
                    <h1 class="text">Inicio de sesión</h1>
                    <p>Para acceder a esta página, es necesario iniciar sesión con una cuenta autorizada.</p>
                    <a href="Identity/Account/Login"><button class="btn btn-primary">Iniciar sesión</button></a>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>
@code {
    [Parameter]
    public int pagoId { get; set; }

    public Pago pago { get; set; } = new Pago();

    protected override void OnInitialized()
    {
        if (pagoId > 0)
        {
            this.pago.PagoId = pagoId;
            this.Buscar();
        }
    }
    private void Buscar()
    {
        var encontrado = pagoBLL.Buscar(pago.PagoId);

        if (encontrado != null)
        {
            pago = encontrado;
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Se ha encontrado con éxito."
                });

        }
        else
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Error, verifique el Id."
                });
        }
    }

    public void Nuevo()
    {
        this.pago = new Pago();
    }

    public void Guardar()
    {
        if (Validate())
        {
            var guardado = pagoBLL.Guardar(pago);

            if (guardado)
            {
                ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Guardado con éxito."
                    });
                Nuevo();
            }
            else
            {
                ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "ERROR!!. Favor revisar los campos."
                    });
                Nuevo();
            }
        }
    }

    public void Eliminar()
    {
        if (pagoBLL.Eliminar(pago))
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Se ha eliminado con exito."
                });

            Nuevo();
        }
        else
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error"
                });
        }
    }

    public bool Validate()
    {
        var validationResults = new List<ValidationResult>();
        var validationContext = new ValidationContext(pago);

        if (!Validator.TryValidateObject(pago, validationContext, validationResults, true))
        {
            foreach (var validationResult in validationResults)
            {
                ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = validationResult.ErrorMessage
                    });
            }
            return false;
        }
        return true;
    }

    public void ShowNotification(NotificationMessage message)
    {
        notification.Notify(message);
    }
}
