@page "/venta"
@page "/Venta/{VentaId:int}"
@inject VentaBLL ventaBLL
@inject ClienteBLL clienteBLL
@inject CarroBLL carroBLL
@inject NotificationService notification

<EditForm Model="venta" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
@*Registro de ventas*@
    <div class="accordion-item">
        <div class="modal-header">
            <h1>Registro de ventas</h1>
        </div>

@*Ventas Id*@
<div class="accordion-body">
            <div class="col-md-6">
                <label for="VentaId">VentaId</label>
                <div class="input-group">
                    <InputNumber @bind-Value="venta.VentaId" class="form-control" />
                    <button type="button" class="btn btn-outline-primary" @onclick="Buscar">
                        <span class="oi oi-magnifying-glass"></span>
                    </button>
                </div>
            </div>
<br>

@*Fecha de la venta*@
        <div class="row">
            <div class="col-md-6">
                <label for="Fecha " class="form-label">Fecha</label>
                <InputDate @bind-Value="venta.Fecha" class="form-control"/>
                <ValidationMessage For="@(() => venta.Fecha)" />

            </div>

                <div class="row">
        <div class="col-md-6">
            <label for="select" class="form-label">Cliente</label>
                    <InputSelect class="form-select" @bind-Value="Detalle.ClienteId">
                        @foreach (Cliente item in clienteBLL.GetList(o => true))
                        {
                            <option value="@item.ClienteId">@item.ClienteId @item.Nombre @item.Apellido</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Detalle.ClienteId)" />

        </div>
    
        <div class="col-md-6">
            <label for="select" class="form-label">Vehiculo</label>
                    <InputSelect class="form-select" @bind-Value="Detalle.CarroId">
                        @foreach (Carro item in carroBLL.GetList(o => true))
                        {
                            <option value="@item.CarroId">@item.CarroId @item.Modelo @item.Marca @item.Anio (@item.Precio)</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Detalle.CarroId)" />

        </div>
  </div>

           <div class="col-md-6">
                <label for="Modelo" class="form-label">Concepto</label>
                <InputText @bind-Value="venta.Concepto" class="form-control" id="Modelo" />
                <ValidationMessage For="@(() => venta.Concepto)" />
            </div>
        </div>

        <div class="modal-header">
            <h2>Detalle de la venta</h2>
        </div>

            @*Detalle de venta*@

<br>
        <div class="row">
        <div class="col-md-6">
                <label for="Periodo" class="form-label">Periodo de Tiempo</label>
                <InputNumber @bind-Value="venta.PeriodoTiempo" class="form-control"/>
                <ValidationMessage For="@(() => venta.PeriodoTiempo)" />

            </div>
            
            <div class="col-md-6">
                <label for="interés" class="form-label">Interés</label>
                <div class="input-group">
                <InputNumber @bind-Value="Detalle.Interes" class="form-control"/>
                <button type="button"class="btn btn-dark" @onclick="AgregarDetalle" ><span class="oi oi-plus"></span> CALCULAR</button>
                <ValidationMessage For="@(() => Detalle.Interes)" />
                 </div>
            </div>   
        </div>
 

        <div class="col-md-1">
            <label for="select" class="form-label">Capital Total</label>
                    <InputSelect class="form-select" @bind-Value="Detalle.CarroId">
                        @foreach (Carro item in carroBLL.GetList(o => true))
                        {
                            <option value="@item.CarroId">@item.Precio</option>
                        }
                    </InputSelect>
                <ValidationMessage For="@(() => Detalle.CarroId)" />
        </div> 
    <div class="col-md-6">
        <label>Periodo de Tiempo: @venta.PeriodoTiempo</label>
    </div>
    <div class="col-md-6">
        <label>Tasa de interés: @Detalle.Interes</label>
    </div>
    <div class="col-md-6">
        <label>Couta a pagar: </label>
    </div>

    <br>
      <div class="table">
             <table class="table">
                    <thead>
                        <tr>
                            <th>N</th>
                            <th>Capital</th>
                            <th>interés</th>
                            <th>Interés + Capital</th>
                            <th>Cuota</th> 
                            <th>Valor adeudado</th>
                        </tr>
                    </thead>

                </table>
            </div>

        </div>


@*Botones*@
<hr>
            <div class="text-center">
                <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"><span class="oi oi-file"></span> Nuevo</button>
                <button type="submit" class="btn btn-outline-success"><span class="oi oi-document"></span> Guardar</button>
                <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><span class="oi oi-delete"></span> Eliminar</button>
            <br>
            <br>
            </div>
     
</div>

</EditForm>
@code {
    [Parameter]
    public int ventaId {get; set; }
    public Carro carro { get; set; } = new Carro();
    public Cliente cliente { get; set; } = new Cliente();
    public VentaDetalle Detalle = new VentaDetalle();
    public Venta venta {get; set; } = new Venta();

    protected override void OnInitialized()
    {
        if(ventaId > 0)
        {
            this.venta.CarroId = ventaId;
            this.Buscar();
        }
    } 
    private void Buscar()
    {
        var encontrado = ventaBLL.Buscar(venta.VentaId);

        if (encontrado != null)
        {
            venta = encontrado;
            ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Se ha encontrado con éxito."
                    });

        }
        else{
            ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Summary = "Error, verifique el Id."
                    }); 
        }
    }

    public void Nuevo()
    {
        this.venta = new Venta();
    }

    public void Guardar()
    {
        if (ValidarProducto())
        {
            var guardado = ventaBLL.Guardar(venta);

            if (guardado)
            {
                ShowNotification(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Guardado con éxito."
                        });
                Nuevo();
            }
            else
            {
                ShowNotification(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Guardado con éxito."
                        });
                Nuevo(); 
            }
        }
    }

public void Eliminar()
{
    if (venta != null && venta.VentaId > 0)
    {
        if (ventaBLL.Eliminar(venta.VentaId))
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Se ha eliminado con éxito."
            });

            Nuevo();
        }
        else
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error, no se pudo eliminar el elemento."
            });
        }
    }
    else
    {
        ShowNotification(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = "Error, no hay elementos para eliminar."
        });
    }
}

    public bool ValidarProducto()
    {
        if (!String.IsNullOrEmpty(venta.Concepto))
        {
            return true;
        }
        return false;
    }
    public void AgregarDetalle()
    {

    }
    public void EliminarDetalle(int detalleId)
    {

    }
    private void RemoverDetalle(VentaDetalle item) 
    {

        this.venta.VentaDetalle.Remove(item);

    }


    public void ShowNotification(NotificationMessage message)
    {
        notification.Notify(message);
    }
}
