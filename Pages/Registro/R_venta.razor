@page "/venta"
@page "/Venta/{VentaId:int}"
@inject VentaBLL ventaBLL
@inject ClienteBLL clienteBLL
@inject CarroBLL carroBLL
@inject NotificationService notification

 <AuthorizeView Context="Context">
    <Authorized>  

<EditForm Model="venta" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
@*Registro de ventas*@
    <div class="accordion-item">
        <div class="modal-header">
            <h1>Registro de ventas</h1>
        </div>

@*Ventas Id*@
<div class="accordion-body">
            <div class="col-md-6">
                <label for="VentaId">VentaId</label>
                <div class="input-group">
                    <InputNumber @bind-Value="venta.VentaId" class="form-control" />
                    <button type="button" class="btn btn-outline-primary" @onclick="Buscar">
                        <span class="oi oi-magnifying-glass"></span>
                    </button>
                </div>
            </div>
<br>

@*Fecha de la venta*@
        <div class="row">
            <div class="col-md-6">
                <label for="Fecha " class="form-label">Fecha</label>
                <InputDate @bind-Value="venta.Fecha" class="form-control"/> 
            </div>

                <div class="row">
        <div class="col-md-6">
            <label for="select" class="form-label">Cliente</label>
                    <InputSelect class="form-select" @bind-Value="venta.ClienteId">
                        @foreach (Cliente item in clienteBLL.GetList(o => true))
                        {
                            <option value="@item.ClienteId">@item.ClienteId @item.Nombre @item.Apellido @item.balance</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => venta.ClienteId)" />

        </div>
    
        <div class="col-md-6">
            <label for="select" class="form-label">Vehículo</label>
                    <InputSelect class="form-select" @bind-Value="venta.CarroId">
                        @foreach (Carro item in carroBLL.GetList(o => true))
                        {
                            <option value="@item.CarroId">@item.CarroId @item.Modelo @item.Marca @item.Color @item.Anio (@item.Precio)</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => venta.CarroId)" />

        </div>
  </div>

           <div class="col-md-6">
                <label for="Modelo" class="form-label">Concepto</label>
                <InputText @bind-Value="venta.Concepto" class="form-control" id="Modelo" />
                <ValidationMessage For="@(() => venta.Concepto)" />
            </div>
        </div>

        <div class="modal-header">
            <h2>Detalle de la venta</h2>
        </div>

            @*Detalle de venta*@

<br>
        <div class="row">
        <div class="col-md-6">
                <label for="Periodo" class="form-label">Periodo de Tiempo</label>
                <InputNumber @bind-Value="venta.PeriodoTiempo" class="form-control"/>
                <ValidationMessage For="@(() => venta.PeriodoTiempo)" />

            </div>
            
            <div class="col-md-6">
                <label for="interés" class="form-label">Interés</label>
                <div class="input-group">
                <InputNumber @bind-Value="venta.interes" class="form-control"/>
                <button type="button"class="btn btn-dark" @onclick="AgregarDetalle" ><span class="oi oi-plus"></span> CALCULAR</button>
                <ValidationMessage For="@(() => venta.interes)" />
                 </div>
            </div>   
        </div>
 
<br>
        
    <div class="col-md-6">
        <label>Periodo de Tiempo: @venta.PeriodoTiempo</label>
    </div>
    <div class="col-md-6">
        <label>Tasa de interés: @venta.interes %</label>
    </div>
    <div class="col-md-6">
        <label>Coutas: @venta.cuota.ToString("N3") </label>
    </div>
    <div class="col-md-6">
        <label>Monto: @venta.Monto </label>
    </div>

    <br>
      <div class="table">
             <table class="table">
                    <thead>
                        <tr>
                            <th>N</th>
                            <th>Capital</th>
                            <th>interés</th>
                            <th>Interés + Capital</th>
                            <th>Cuota</th> 
                            <th>Valor adeudado</th>
                        </tr>
                    </thead>
                    <tbody>
                            @if(venta.VentaDetalle!=null){
                              @foreach (var detalle1 in venta.VentaDetalle)
                             { 
                                 <tr>
                                      <td>@detalle1.cuota</td> 
                                      <td>@detalle1.Capital.ToString("N3")</td>
                                      <td>@detalle1.interes.ToString("N3")</td>
                                      <td>@detalle1.interesMasCapital.ToString("N3")</td>
                                      <td>@venta.cuota.ToString("N3")</td>
                                      <td>@detalle1.ValorAdeudado.ToString("N3")</td>
                                 </tr>
                             }
                            }
                         </tbody>

                </table>
            </div>

        </div>

@*Botones*@
<hr>
    <div class="text-center">
                <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"><span class="oi oi-file"></span> Nuevo</button>
                <button type="submit" class="btn btn-outline-success"><span class="oi oi-document"></span> Guardar</button>
                <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><span class="oi oi-delete"></span> Eliminar</button>
            <br>
            <br>
    </div>
     
</div>

</EditForm>


    </Authorized>
        <NotAuthorized>
        <div class="container-fluid">
            <div class="row justify-content-center">
                <div class="col-md-6 text-center">
                    <h1 class="text">Inicio de sesión</h1>
                    <p>Para acceder a esta página, es necesario iniciar sesión con una cuenta autorizada.</p>
                    <a href="Identity/Account/Login"><button class="btn btn-primary">Iniciar sesión</button></a>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>
@code {
    [Parameter]
    public int ventaId {get; set; }
    public Carro carro { get; set; } = new Carro();
    public Cliente cliente { get; set; } = new Cliente();
    public VentaDetalle Detalle = new VentaDetalle();
    public Venta venta {get; set; } = new Venta();
    public bool Save { get; set; } = false;

    protected override void OnInitialized()
    {
        if(ventaId > 0)
        {
            this.venta.CarroId = ventaId;
            this.Buscar();
        }
    } 
    private void Buscar()
    {
        var encontrado = ventaBLL.Buscar(venta.VentaId);

        if (encontrado != null)
        {
            venta = encontrado;
            ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Se ha encontrado con éxito."
                    });
        }
        else{
            ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Summary = "Error, verifique el Id."
                    }); 
        }
    }
    public void Nuevo()
    {
        this.venta = new Venta();
    }
    public void Guardar()
    {
        if(Save == false)
        {

                ShowNotification(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Verifica que el detalle este realizado."
                        });
                        return;
        }
        if (Validar())
        {
            var guardado = ventaBLL.Guardar(venta);

            if (guardado)
            {
                ShowNotification(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Guardado con éxito."
                        });
                Nuevo();
            }
            else
            {
                ShowNotification(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Guardado con éxito."
                        });
                Nuevo(); 
            }
        }
    }

public void Eliminar()
{
    if (venta != null && venta.VentaId > 0)
    {
        if (ventaBLL.Eliminar(venta.VentaId))
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Se ha eliminado con éxito."
            });

            Nuevo();
        }
        else
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error, no se pudo eliminar el elemento."
            });
        }
    }
    else
    {
        ShowNotification(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = "Error, no hay elementos para eliminar."
        });
    }
}

    public bool Validar()
    {
        if (!String.IsNullOrEmpty(venta.Concepto))
        {
            return true;
        }
        return false;
    }
    public void AgregarDetalle()
    {
        
        if(venta.ClienteId<=0){
            ShowNotification(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = "Debe seleccionar un cliente."
        });
        return;
        }


        if(venta.CarroId<=0){
            ShowNotification(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = "Debe seleccionar un vehiculo."
        });
        return;
        }
        if(venta.PeriodoTiempo<=0){
            ShowNotification(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = "EL periodo de tiempo debe ser mayor a 0."
        });
        return;
        }
        if(venta.interes<=0){
            ShowNotification(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = "El interes debe ser mayor a 0"
        });
        return;
        }

        venta.Monto= carroBLL.Buscar(venta.CarroId).Precio;
        double init=venta.interes/100;
        double total= init+1;
        double intereses = Math.Pow(total,venta.PeriodoTiempo);  

        venta.cuota = venta.Monto*( (init * intereses)/ (intereses-1 ));
        venta.VentaDetalle= new List<VentaDetalle>();
        Detalle= new VentaDetalle();
 
        double cap=venta.Monto;
        for (int i = 0; i < venta.PeriodoTiempo; i++)
        {
            Detalle.cuota= i+1;
            Detalle.interes= cap *init;
            Detalle.interesMasCapital= Detalle.interes + cap;
            Detalle.ValorAdeudado= Detalle.interesMasCapital - venta.cuota;
            venta.VentaDetalle.Add(Detalle);
            Detalle.Capital=cap;
            cap= Detalle.ValorAdeudado;
            Save = true;
            Detalle= new VentaDetalle();
            
        }
    }

    public void ShowNotification(NotificationMessage message)
    {
        notification.Notify(message);
    }
}
