@page "/cliente"
@page "/Cliente/{ClienteId:int}"
@inject ClienteBLL clienteBLL
@inject NotificationService notification

<EditForm Model="cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

<div class="accordion-item">
    <div class="modal-header">
        <h1>Registro de Cliente</h1>
    </div>

    <div class="accordion-body">
        <div class="row">
            <div class="col-md-6">
                <label for="ClienteId">ClienteId</label>
                <div class="input-group">
                    <InputNumber type="number" @bind-Value="cliente.ClienteId" class="form-control" />
                    <button type="button" class="btn btn-outline-primary" @onclick="Buscar"><span class="oi oi-magnifying-glass"></span></button>
                </div>
            </div>
            <div class="col-md-6">
                <label for="Fecha" class="form-label">Fecha</label>
                <InputDate @bind-Value="cliente.Fecha" class="form-control" id="Modelo" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <label for="Nombre" class="form-label">Nombre</label>
                <InputText type="text" @bind-Value="cliente.Nombre" class="form-control" id="Modelo" />
                <ValidationMessage For="@(() => cliente.Nombre)" />
            </div>

            <div class="col-md-6">
                <label for="Apellido">Apellido</label>
                <InputText type="text" @bind-Value="cliente.Apellido" class="form-control" />
                <ValidationMessage For="@(() => cliente.Apellido)" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <label for="CorreoElectronico">Correo Electronico</label>
                <InputText type="text" @bind-Value="cliente.CorreoElectronico" class="form-control" />
                <ValidationMessage For="@(() => cliente.CorreoElectronico)" />
            </div>

            <div class="col-md-6">
                <label for="Telefono">Telefono</label>
                <InputText type="text" @bind-Value="cliente.Telefono" class="form-control" />
                <ValidationMessage For="@(() => cliente.Telefono)" />
            </div>
        </div>
    </div>

@*Botones*@
<hr>
        <div class="text-center">
            <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"><span class="oi oi-file"></span> Nuevo</button>
            <button type="submit" class="btn btn-outline-success"><span class="oi oi-document"></span> Guardar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><span class="oi oi-delete"></span> Eliminar</button>
        <br>
        <br>
        </div>
    </div>
</EditForm>
@code {
    [Parameter]
    public int clienteId {get; set; }

    public Cliente cliente {get; set; } = new Cliente();

    protected override void OnInitialized()
    {
        if(clienteId > 0)
        {
            this.cliente.ClienteId = clienteId;
            this.Buscar();
        }
    } 
    private void Buscar()
    {
        var encontrado = clienteBLL.Buscar(cliente.ClienteId);

        if (encontrado != null)
        {
            cliente = encontrado;
            ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Se ha encontrado con éxito."
                    });

        }
        else{
            ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Summary = "Error, verifique el Id."
                    }); 
        }
    }

    public void Nuevo()
    {
        this.cliente = new Cliente();
    }

    public void Guardar()
    {
        if (ValidateCliente())
        {
            var guardado = clienteBLL.Guardar(cliente);

            if (guardado)
            {
                ShowNotification(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Guardado con éxito."
                        });
                Nuevo();
            }
            else
            {
                ShowNotification(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "ERROR!!. Favor revisar los campos."
                        });
                Nuevo(); 
            }
        }
    }

    public void Eliminar()
    {
        if(clienteBLL.Eliminar(cliente))
        {
            ShowNotification(
                new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "No hay nada para eliminar"
                });

            Nuevo();
        }
        else
        {
            ShowNotification(
                new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error"
                });
        }
    }

    public bool ValidateCliente()
    {
        var validationResults = new List<ValidationResult>();
        var validationContext = new ValidationContext(cliente);

        if (!Validator.TryValidateObject(cliente, validationContext, validationResults, true))
        {
            foreach (var validationResult in validationResults)
            {
                ShowNotification(
                    new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = validationResult.ErrorMessage
                    });
            }
            return false;
        }
        return true;
    }

    public void ShowNotification(NotificationMessage message)
    {
        notification.Notify(message);
    }
}
